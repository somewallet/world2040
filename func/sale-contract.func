;; Storage

;; stored_seqno int32
;; public_key int256
;; common_nft_addr_dict dict
;; uncommon_nft_addr_dict dict
;; rare_nft_addr_dict dict
;; nft_prices cell

{-

buy#_ query_id:int32 common_purchase_quantity:int32 uncommon_purchase_quantity:int32 rare_purchase_quantity:int32 = IntMsgBody;

add#_ msg_seqno:int32 nft_type:int64 key:int256 value:VmCellSlice = ExtMsgBody
remove#_ msg_seqno:int32 nft_type:int64 key:int256 = ExtMsgBody
edit#_ msg_seqno:int32 nft_prices:NftPrices = ExtMsgBody

_ common_nft_price:int64 uncommon_nft_price:int64 rare_nft_price:int64 = NftPrices

-}

#pragma version >=0.3.0; ;; с этой версии компилятора можно делать инклюды

#include "../lib/func/stdlib.fc"; ;; стандартная библиотека FunC
#include "utils/op-codes.func"; ;; OP коды
#include "utils/params.func"; ;; полезные функции

(int, int, cell, cell, cell, slice) load_data() {

    slice ds = get_data().begin_parse();

    return (
        
        ds~load_uint(32), ;; stored_seqno
        ds~load_uint(256), ;; public_key
        ds~load_dict(), ;; common_nft_addr_dict
        ds~load_dict(), ;; uncommon_nft_addr_dict
        ds~load_dict(), ;; rare_nft_addr_dict
        ds~load_ref().begin_parse() ;; nft_prices slice

    );

}

(int, int, int) load_prices(slice nft_prices) {
    return (
        nft_prices~load_uint(64),
        nft_prices~load_uint(64),
        nft_prices~load_uint(64)
    );
}

() save_data(

        int stored_seqno, 
        int public_key, 
        cell common_nft_addr_dict, 
        cell uncommon_nft_addr_dict, 
        cell rare_nft_addr_dict, 
        slice nft_prices

    ) impure {

        set_data(
            begin_cell()
                .store_uint(stored_seqno, 32)
                .store_uint(public_key, 256)
                .store_dict(common_nft_addr_dict)
                .store_dict(uncommon_nft_addr_dict)
                .store_dict(rare_nft_addr_dict)
                .store_slice(nft_prices)
            .end_cell()

    );

}

(int, int, int) get_available_nft_num() method_id {
    
    (
        _, _,
        cell common_nft_addr_dict, 
        cell uncommon_nft_addr_dict, 
        cell rare_nft_addr_dict,
        _

    ) = load_data();

    int key = -1;
    int common_nft_quantity = 0;

    do {

        common_nft_quantity += 1; 
        (key, slice cs, int f) = udict_get_next?(common_nft_addr_dict, 256, -1);

    } until (~ f);

    int key = -1;
    int uncommon_nft_quantity = 0;

    do {

        uncommon_nft_quantity += 1; 
        (key, slice cs, int f) = udict_get_next?(uncommon_nft_addr_dict, 256, -1);

    } until (~ f);
    
    int key = -1;
    int rare_nft_quantity = 0;

    do {

        rare_nft_quantity += 1; 
        (key, slice cs, int f) = udict_get_next?(rare_nft_addr_dict, 256, -1);

    } until (~ f);

    return (

        common_nft_quantity,
        uncommon_nft_quantity,
        rare_nft_quantity

    );

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    
    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return (); ;; terminate contract execution
    }

    ;; выкидываем, если пусто в msg_body
    if (in_msg_body.slice_empty?()) { return (); } 

    slice sender_address = cs~load_msg_addr();
    force_chain(sender_address); ;; check workchain = 0
    
    int op = in_msg_body~load_uint(64);

    (

        _, _,
        cell common_nft_addr_dict, 
        cell uncommon_nft_addr_dict, 
        cell rare_nft_addr_dict,
        slice nft_prices

    ) = load_data();
    
    if (op == op::buy()) { ;; сценарий покупки NFT

        ;; смотрим, какие юзер запрашивает NFT
        int common_purchase_quantity = in_msg_body~load_uint(32);
        int uncommon_purchase_quantity = in_msg_body~load_uint(32);
        int rare_purchase_quantity = in_msg_body~load_uint(32);

        ;; проверяем наличие NFT
        (
            
            int common_nft_quantity, 
            int uncommon_nft_quantity, 
            int rare_nft_quantity

        ) = get_available_nft_num();

        ;; выкидываем из программы, если запрашиваемое количество больше доступного
        if (~ ((common_purchase_quantity <= common_nft_quantity) & (uncommon_purchase_quantity <= uncommon_nft_quantity) & (rare_purchase_quantity <= rare_nft_quantity))) {
            return();
        }

        ;; выгружаем цены NFT из памяти (в нанограммах)

        (

            int stored_seqno, 
            int public_key, 
            cell common_nft_addr_dict, 
            cell uncommon_nft_addr_dict, 
            cell rare_nft_addr_dict, 
            slice nft_prices

        ) = load_data();

        (

            int common_nft_price,
            int uncommon_nft_price,
            int rare_nft_price

        ) = load_prices(nft_prices);

        ;; Считаем общую сумму заказа

        int order_price = (common_nft_price * common_nft_quantity) + (uncommon_nft_price * uncommon_nft_quantity) + (rare_nft_price * rare_nft_quantity);

        ;; Завершаем работу смарта, если в сообщении меньше монет, чем стоимость NFT

        if (msg_value < order_price) { return(); }

        ;; создаем словарь для добавления позиций к отправке

        cell order_dict = new_dict();

        ;; добавляем коммонки в заказ

        repeat(common_purchase_quantity) {

            (int key, slice value, int flag) = common_nft_addr_dict~udict::delete_get_min(256);
            throw_unless(112, flag); ;; выкидываем, если не получилось вытащить из словаря
            order_dict~udict_add?(256, key, value);

        }

        ;; добавляем анкоммонки в заказ
        
        repeat(uncommon_purchase_quantity) {

            (int key, slice value, int flag) = uncommon_nft_addr_dict~udict::delete_get_min(256);
            throw_unless(113, flag); ;; выкидываем, если не получилось вытащить из словаря
            order_dict~udict_add?(256, key, value);

        }

        ;; добавляем редкие NFT в заказ

        repeat(rare_purchase_quantity) {

            (int key, slice value, int flag) = rare_nft_addr_dict~udict::delete_get_min(256);
            throw_unless(114, flag); ;; выкидываем, если не получилось вытащить из словаря
            order_dict~udict_add?(256, key, value);

        }

        ;; отсылаем NFT владельцам циклом

        int key = -1;

        do {

            (int key, slice nft_addr, int f) = udict_get_next?(order_dict, 256, key);

            cell nft_transfer_body = (
                begin_cell()
                    .store_uint(1607220500, 32) ;; op::transfer() (UINT32 - Big Endian representation)
                    .store_uint(0, 64) ;; query_id
                    .store_slice(sender_address) ;; new owner
                    .store_slice(sender_address) ;; responce destination
                    .store_uint(0, 1) ;; forward amount
                    .store_coins(0)
                .end_cell()
            );

            cell msg = (
                begin_cell()
                    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                    .store_slice(nft_addr)
                    .store_coins(50000000)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                    .store_ref(nft_transfer_body)
                .end_cell()
            );

            int mode = 0;

            send_raw_message(msg, mode);

        } until (~ f);

        save_data(

            stored_seqno, 
            public_key, 
            common_nft_addr_dict, 
            uncommon_nft_addr_dict, 
            rare_nft_addr_dict, 
            nft_prices

        );

        return();

    }

    throw(111); ;; неверный op

}

() recv_external(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    int op = in_msg_body~load_uint(64);
    int msg_segno = in_msg_body~load_uint(32);

    slice signature = in_msg_body~load_bits(512);

    (int stored_seqno, int public_key, _, _, _, _) = load_data();

    throw_unless(33, msg_segno == stored_seqno); ;; проверяем порядковый номер сообщения
    throw_unless(35, check_signature(slice_hash(in_msg_body), signature, public_key)); ;; проверяем подпись

    accept_message(); ;; принимаем сообщение
    
    if (op == op::add()) { ;; добавить NFT в словарь

        int nft_type = in_msg_body~load_uint(64);
        int key = in_msg_body~load_uint(256);

        (

            int stored_seqno, 
            int public_key, 
            cell common_nft_addr_dict, 
            cell uncommon_nft_addr_dict, 
            cell rare_nft_addr_dict, 
            slice nft_prices

        ) = load_data();

        if (nft_type == type::common()) { common_nft_addr_dict~udict_set(256, key, in_msg_body); }

        if (nft_type == type::uncommon()) { uncommon_nft_addr_dict~udict_set(256, key, in_msg_body); }

        if (nft_type == type::rare()) { rare_nft_addr_dict~udict_set(256, key, in_msg_body); }

        save_data(

            stored_seqno, 
            public_key, 
            common_nft_addr_dict, 
            uncommon_nft_addr_dict, 
            rare_nft_addr_dict, 
            nft_prices

        );

        return ();
        
    }

    if (op == op::remove()) { ;; удалить NFT из словаря

        int nft_type = in_msg_body~load_uint(64);
        int key = in_msg_body~load_uint(256);

        (

            int stored_seqno, 
            int public_key, 
            cell common_nft_addr_dict, 
            cell uncommon_nft_addr_dict, 
            cell rare_nft_addr_dict, 
            slice nft_prices

        ) = load_data();
        
        if (nft_type == type::common()) { udict_delete?(common_nft_addr_dict, 256, key); }

        if (nft_type == type::uncommon()) { udict_delete?(uncommon_nft_addr_dict, 256, key); }

        if (nft_type == type::rare()) { udict_delete?(rare_nft_addr_dict, 256, key); }

        save_data(

            stored_seqno, 
            public_key, 
            common_nft_addr_dict, 
            uncommon_nft_addr_dict, 
            rare_nft_addr_dict, 
            nft_prices

        );
        
        return ();

    }

    if (op == op::edit()) { ;; редактировать цены NFT

        (

            int stored_seqno, 
            int public_key, 
            cell common_nft_addr_dict, 
            cell uncommon_nft_addr_dict, 
            cell rare_nft_addr_dict, 
            slice nft_prices

        ) = load_data();

        slice new_nft_prices = skip_last_bits(in_msg_body, 0);

        save_data(

            stored_seqno, 
            public_key, 
            common_nft_addr_dict, 
            uncommon_nft_addr_dict, 
            rare_nft_addr_dict, 
            new_nft_prices

        );

        return ();

    }

    throw(111); ;; неверный op


}


